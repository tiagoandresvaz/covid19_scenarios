version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0

jobs:
  build:
    resource_class: medium

    docker:
      - image: cimg/node:14.15.4

    steps:
      - run: apt-get install -qq --yes curl bash git unzip

      - run:
          name: 'Print versions 2'
          command: |
            set -x
            git --version
            node --version
            npm --version
            yarn --version

      - checkout

      - run:
          name: 'Install AWS CLI v2'
          command: |
            set -x
            ./tools/install-awscli.sh
            aws --version

      - restore_cache:
          name: 'Restore build cache'
          keys:
            - cache-covid19_scenarios-build-v2-{{ arch }}-{{ checksum "yarn.lock" }}

      - run: yarn install --frozen-lockfile
      - run: cp .env.example .env
      - run: yarn schema:totypes
      - run: yarn eslint --max-warnings=0
      - run: yarn prod:build

      - save_cache:
          name: 'Save build cache'
          key: cache-covid19_scenarios-build-v2-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./.cache
            - ./.build/production/tmp/cache

      - run:
          name: 'Deploy web bundle to AWS S3'
          command: |
            cd .build/production/web
            aws s3 cp --recursive --cache-control "max-age=2592000, public" "_next/" "s3://${AWS_S3_BUCKET}/_next/"

      - run:
          name: 'Deploy web root to AWS S3'
          command: |
            cd .build/production/web
            aws s3 cp --recursive --exclude "_next" --exclude "*.html" "./" "s3://${AWS_S3_BUCKET}/"

      - run:
          name: 'Deploy html files to AWS S3, removing extension'
          command: |
            cd .build/production/web
            find * -type f -name "*.html" -exec bash -c '\
            aws s3 cp \
              --content-type "text/html" \
              --cache-control "no-cache" \
              --metadata-directive REPLACE \
                $1 \
                s3://${AWS_S3_BUCKET}/${1%.html}' \
            - "{}" \;

      - run:
          name: 'Invalidate Cloudfront cache'
          command: |
            aws cloudfront create-invalidation \
              --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} \
              --paths "/*"

workflows:
  version: 2
  build:
    jobs:
      - build:
          context: covid19_scenarios-<< pipeline.git.branch >>
          filters:
            branches:
              only: /^(master|staging|release)$/
